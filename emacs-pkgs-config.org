#+STARTUP: overview hidestars
#+AUTHOR: Jonathan Rostran
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :comments no :results silent

* General Emacs Setup
#+BEGIN_SRC emacs-lisp
  (setq-default inhibit-startup-message t ; don't show default emacs startup screen
                window-combination-resize t            ; Resize windows proportionally
                display-time-default-load-average nil  ; don't show system load time in modeline
                indent-tabs-mode nil                   ; stop using tabs to indent
                tab-width 4 				            ; change default tab width
                )

  (setq gc-cons-threshold 50000000)
  (setq large-file-warning-threshold 100000000)




  (load-theme 'leuven nil)

  ;; toggle features that are turned off in a fresh Emacs install
  (put 'downcase-region 'disabled nil) ; allow me to use C-x C-l (downcase region)
  (put 'upcase-region 'disabled nil) ; allow me to use C-x C-u (capitalize
  (put 'narrow-to-region 'disabled nil) 	; allow me to narrow to region

  ;; Tweaking Registers

  ;; Useful Register setup when appending/prepending
  (setq register-separator ?+)
  (set-register register-separator "\n\n")

  ;; Reserve `z' register to jump to config quickly
  (set-register ?z '(file . "~/my-sys-setup/emacs-pkgs-config.org"))

  ;; Useful functionality
  (add-hook 'before-save-hook 'delete-trailing-whitespace) ; remove trailing whitespace on save
  (add-hook 'after-save-hook
            ;; Emacs will make a script file executable if it decides it is one
            'executable-make-buffer-file-executable-if-script-p)

  ;; Extra manuals
  (add-to-list 'Info-default-directory-list "~/Documents/Info")

  ;; Increase default max recursion depth
  (setq max-specpdl-size 19500)
  (setq max-lisp-eval-depth 24000)

  ;; Pick up global NPM packages
  (add-to-list 'exec-path "~/node_modules/.bin")
  (add-to-list 'exec-path "~/.nvm/versions/node/v14.2.0/bin/")

  (menu-bar-mode -1) ;; disable for more headspace

  ;; UTF-8
  (prefer-coding-system 'utf-8)

  ;; Just kill the current buffer
  (global-set-key (kbd "C-x k") 'kill-this-buffer)


  ;; workaround for buffers with long lines of chars
  (setq-default bidi-paragraph-direction 'left-to-right) ; just work with left to right langs
  (setq bidi-inhibit-bpa t)
  (global-so-long-mode 1)

#+END_SRC
* Changes to default Emacs UI
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)			; remove toolbar
  (scroll-bar-mode -1) 			; remove scroll bar

  ;; Prompts that require 'yes' or 'no' accept 'y' or 'n'
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Remember cursor position, for emacs 25.1 or later
  (save-place-mode 1)

  (display-time-mode 1) ; display time in modeline

  (setq-default ns-pop-up-frames nil       ; open files in an exising frame
    )

  (blink-cursor-mode 0)			; stop cursor blinking
#+END_SRC
* Custom Prefix Keys
Custom prefix keys for things I use often
#+BEGIN_SRC emacs-lisp

  ;; jump to file useful for opening imgs in html 'img' tag
  (global-set-key (kbd "<f8>") 'find-file-at-point)
  (global-set-key (kbd "<C-M-return>") 'delete-other-windows)

  ;; s-z for commonly used keys
  (define-prefix-command 'my-super-z-map)
  (global-set-key (kbd "C-z") 'my-super-z-map)

  ;; (define-key my-super-z-map (kbd "f") 'counsel-rg)	   ; find in current working directory

  (define-key my-super-z-map (kbd "o") 'browse-url-at-point)
  (define-key my-super-z-map (kbd "r") 'revert-buffer)
  (define-key my-super-z-map (kbd "a") 'add-file-local-variable-prop-line)
#+END_SRC
* Dashboard
#+begin_src emacs-lisp
  (setq dashboard-center-content t
        dashboard-projects-backend 'project-el
        ;; dashboard-items '((projects . 5)
        ;;                   (recents  . 10)
        ;;                   (bookmarks . 3)
        ;;                   (agenda . 3)
        ;;                   (registers . 3))
        )
  (dashboard-setup-startup-hook)
#+end_src
* Selectrum / CtrlF
  Better buffer search and improved minibuffer experience
  #+begin_src emacs-lisp
    (vertico-mode)
    (marginalia-mode)

    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion)))))

    ;; Add prompt indicator to `completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)


    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    (advice-add #'vertico--setup :after
                (lambda (&rest _)
                  (setq-local completion-auto-help nil
                              completion-show-inline-help nil)))
  #+end_src
* Magit
  #+begin_src emacs-lisp
    (define-prefix-command 'my/magit-prefix-key)
    (global-set-key (kbd "C-c m") 'my/magit-prefix-key)
    (define-key my/magit-prefix-key (kbd "s") 'magit-status)
    (define-key my/magit-prefix-key (kbd "d") 'magit-dispatch)
    (define-key my/magit-prefix-key (kbd "c") 'magit-clone)
    (define-key my/magit-prefix-key (kbd "i") 'magit-init)
  #+end_src
* Dired
#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies 'always ; “always” means no asking
        dired-recursive-deletes 'top ; “top” means ask once
        dired-dwim-target t)

  (add-hook 'dired-mode-hook '(lambda ()
                                (dired-hide-details-mode 1)))

  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
* Ibuffer
manage several buffers interactively
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (add-hook 'ibuffer-mode-hook 'ibuffer-vc-set-filter-groups-by-vc-root)
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
  (with-eval-after-load 'company
      (setq company-echo-delay 0   ; disable the delay
        company-idle-delay 0
        company-tooltip-limit 10
        company-tooltip-align-annotations t
        company-minimum-prefix-length 2))

  ;; Company quickhelp adds a pop-up description for the function
  ;; completion candidate
  (company-quickhelp-mode)
  (setq company-quickhelp-delay 2)
#+END_SRC
* Javascript
  #+begin_src emacs-lisp
    (setq js-indent-level 2)
  #+end_src
* Web Development
** Emmet
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'emmet-mode
    (setq emmet-move-cursor-between-quotes t      ;  cursor to be positioned between first empty quotes after expanding
          emmet-expand-jsx-className? nil
          emmet-self-closing-tag-style " /"))
#+END_SRC
** CSS
#+BEGIN_SRC emacs-lisp
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  ;; Remap css-lookup-symbol to fix global counsel-mode key rebindings
  (add-hook 'css-mode-hook
            (lambda () (define-key css-mode-map (kbd "C-h S") 'css-lookup-symbol)))

#+END_SRC

** HTML
#+BEGIN_SRC emacs-lisp
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'html-mode-hook (lambda ()(setq emmet-indentation 2)))
#+END_SRC

** Web Mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook 'emmet-mode)

  (add-to-list 'auto-mode-alist '("/templates/.*\\.html?\\'" . web-mode))
  ;; (add-to-list 'auto-mode-alist '("/\\(components\\|containers\\|src\\)/.*\\.js[x]?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.\\(handlebars\\|hbs\\)\\'" . web-mode))

  (with-eval-after-load 'web-mode
    (setq	web-mode-engines-alist
          '(
            ("ctemplate" . "\\.\\(handlebars\\|hbs\\)\\'")
            ("django" . "./templates/.*\\.html?\\'"))
          ;; web-mode-content-types-alist
          ;; '(
          ;;   ("jsx" . "/\\(components\\|containers\\|src\\)/.*\\.js[x]?\\'"))
          )

    (setq web-mode-enable-html-entities-fontification t
          web-mode-enable-css-colorization t
          web-mode-enable-current-column-highlight t
          web-mode-markup-indent-offset 2
          web-mode-enable-auto-closing t
          web-mode-enable-auto-opening t
          web-mode-enable-auto-pairing nil
          web-mode-enable-auto-indentation nil

          web-mode-code-indent-offset 2))

#+END_SRC

* Python
#+BEGIN_SRC emacs-lisp
  (elpy-enable)
  (defalias 'workon 'pyvenv-workon)

  (setq elpy-rpc-python-command "python3"
        ;; Interpreter to be used
        python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt")

  ;; (add-hook 'elpy-mode-hook (lambda () (elpy-shell-toggle-dedicated-shell 1)))
#+END_SRC

* Yasnippet
#+begin_src emacs-lisp
  (with-eval-after-load 'yasnippet
    (add-to-list 'yas-snippet-dirs "~/src/guix/etc/snippets")
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
    (yas-reload-all)
    (add-hook 'js-mode-hook #'yas-minor-mode))
#+end_src

* Clojure
#+begin_src emacs-lisp
  (setq cider-font-lock-dynamically '(macro core function var))
  (setq cider-eval-result-prefix ";; => ")
#+end_src

* TODO Eglot
#+begin_src emacs-lisp

#+end_src

* Scheme
#+begin_src emacs-lisp
  (setq geiser-active-implementations '(guile))

  (with-eval-after-load 'geiser-guile
    (add-to-list 'geiser-guile-load-path "~/src/guix"))
#+end_src

* GGtags
#+begin_src emacs-lisp
  ;; (add-hook 'c-mode-common-hook
  ;;           (lambda ()
  ;;             ;; activated for other languages as well
  ;;             (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode 'js-mode)
  ;;               (ggtags-mode 1))))

  ;; (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
  ;; (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
  ;; (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
  ;; (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
  ;; (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
  ;; (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

  ;; (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
#+end_src
* C
[[https://www.emacswiki.org/emacs/AaronL][Copy paste from here]]
#+BEGIN_SRC emacs-lisp
   ;; use the GNU style for C files, spaces instead of tabs, highlight bad spaces
  (setq c-mode-common-hook '(lambda () (c-set-style "gnu")
                              (setq show-trailing-whitespace t)))
  (defun my-c-mode-hook ()
    (c-set-style "my-c-style")
    (c-set-offset 'substatement-open '0) ; brackets should be at same indentation level as the statements they open
    (c-set-offset 'inline-open '+)
    (c-set-offset 'block-open '+)
    (c-set-offset 'brace-list-open '+)   ; all "opens" should be indented by the c-indent-level
    (c-set-offset 'case-label '+))       ; indent case labels by c-indent-level, too
  (add-hook 'c-mode-hook 'my-c-mode-hook)
#+END_SRC

* Org
#+begin_src emacs-lisp
  (global-set-key (kbd "<f6>") 'org-capture)

  ;; TODO Setup later
  ;; :map org-mode-map
  ;; ("s-j o" . counsel-org-goto)
  ;; ("s-j j" . counsel-org-goto-all)
  ;; ("s-f" . counsel-org-file)
  ;; ("s-r" . avy-org-refile-as-child)
  ;; ("s-i" . my/copy-id-to-clipboard)

  (with-eval-after-load 'org
    (visual-line-mode 1) ; wrap lines
    (setq org-src-fontify-natively t    ; highlight syntax in code source blocks
          ;; org-ditaa-jar-path "~/.emacs.d/ditaa-0.11.0-standalone.jar"
          org-latex-pdf-process
          (let
              ;; https://tex.stackexchange.com/questions/2099/how-to-include-svg-diagrams-in-latex
              ((cmd (concat "lualatex -interaction=nonstopmode --shell-escape"
                            " --synctex=1"
                            ;; https://tex.stackexchange.com/questions/124246/uninformative-error-message-when-using-auctex
                            "--file-line-error"
                            " -output-directory %o %f")))
            (list cmd
                  "cd %o; if test -r %b.idx; then makeindex %b.idx; fi"
                  "cd %o; bibtex %b"
                  cmd
                  cmd))
          )
    (setq org-catch-invisible-edits t)
    )


  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (latex . t)
     (python . t)
     (ditaa . t)))

  ;; Org Tree Slide setup
  (with-eval-after-load 'org-tree-slide-mode
    (org-image-actual-width nil))

#+end_src
* PDF Tools
#+BEGIN_SRC emacs-lisp
  (pdf-loader-install)
#+END_SRC
* Extras
Nice to have packages and functionality
** Already in Emacs
*** Misc
 #+begin_src emacs-lisp
   ;; Highlight matching parenthesis
   (show-paren-mode t)

   ;; Electric Layout Mode

   (add-hook 'css-mode 'electric-layout-mode)    ; insert newline after the insertion of '{'

   (electric-indent-mode +1) ; toggle on the fly re-indentation

   ;; Electric Pairs
   (add-hook 'mhtml-mode-hook 'electric-pair-local-mode)
   (add-hook 'emacs-lisp-mode-hook 'electric-pair-local-mode)
   (add-hook 'clojure-mode-hook 'electric-pair-local-mode)
   (add-hook 'lisp-interaction-mode-hook 'electric-pair-local-mode)
   (add-hook 'web-mode-hook 'electric-pair-local-mode)
   (add-hook 'ielm-mode-hook 'electric-pair-local-mode)
   (add-hook 'js-mode-hook 'electric-pair-local-mode)
   (add-hook 'org-mode-hook 'electric-pair-local-mode)
   (add-hook 'scheme-mode-hook 'electric-pair-local-mode)
   (add-hook 'python-mode-hook 'electric-pair-local-mode)
   (add-hook 'css-mode-hook 'electric-pair-local-mode)

   ;; Add extra pairs for org mode
   (defvar org-electric-pairs '((?= . ?=)) "Electric pairs for org-mode.")
   (defun org-add-electric-pairs ()
     (setq-local electric-pair-pairs (append electric-pair-pairs org-electric-pairs))
     (setq-local electric-pair-text-pairs electric-pair-pairs))
   (add-hook 'org-mode-hook 'org-add-electric-pairs)

   ;; Add extra pairs for js-mode
   (defvar js-mode-electric-pairs '((?` . ?`)) "Electric pairs for js-mode.")
   (defun js-mode-add-electric-pairs ()
     (setq-local electric-pair-pairs (append electric-pair-pairs js-mode-electric-pairs))
     (setq-local electric-pair-text-pairs electric-pair-pairs))
   (add-hook 'js-mode-hook 'js-mode-add-electric-pairs)
   (add-hook 'mhtml-mode-hook 'js-mode-add-electric-pairs) ; needs it for `script` tags

   ;; Add extra pairs for web mode (jinja)
   (defvar web-mode-jinja-electric-pairs '((?% . ?%) (?< . ?>)) "Electric pairs for web-mode.")
   (defun web-mode-add-jinja-electric-pairs ()
     (setq-local electric-pair-pairs (append electric-pair-pairs web-mode-jinja-electric-pairs)))
   (add-hook 'web-mode-hook 'web-mode-add-jinja-electric-pairs)

   ;; Subword Mode
   (add-hook 'js-mode-hook #'subword-mode)
   (add-hook 'python-mode-hook #'subword-mode)
   (add-hook 'c-mode-hook #'subword-mode)
   (add-hook 'clojure-mode-hook #'subword-mode)

   ;; Enable Dash font-locking
   (eval-after-load 'dash '(dash-enable-font-lock))
 #+end_src

*** Prettify Symbols
  #+BEGIN_SRC emacs-lisp
    (global-prettify-symbols-mode t)

    (defun my-add-pretty-lambda ()
      "Make some word or string show as pretty Unicode symbols"
      (push '("lambda" . 955) prettify-symbols-alist)	      ; λ
      (push '("->" . 8594) prettify-symbols-alist)              ; →
      (push '("=>" . 8658) prettify-symbols-alist)              ; ⇒
      (push '("map" . 8614) prettify-symbols-alist) 	      ; ↦
      )

    (add-hook 'tex-mode-hook 'my-add-pretty-lambda)

    (add-hook 'org-mode-hook (lambda ()
                               "Beautify Org Checkbox Symbol"
                               (push '("[ ]" .  "▢") prettify-symbols-alist)
                               (push '("*" .  "◉") prettify-symbols-alist)
                               (push '("[X]" . "☑" ) prettify-symbols-alist)
                               (push '("[-]" . "❍" ) prettify-symbols-alist)))

    (add-hook 'emacs-lisp-mode-hook
              (lambda ()
                "Beautify Emacs Symbols"
                (push '("<=" . "≤") prettify-symbols-alist)))

    (add-hook 'scheme-mode-hook
              (lambda ()
                "Beautify Emacs Symbols"
                (push '("<=" . "≤") prettify-symbols-alist)))
  #+END_SRC
** Not included in Emacs by default
*** Iedit
#+begin_src emacs-lisp
  (global-set-key (kbd "C-;") 'iedit-mode)
#+end_src
*** Rainbow Delimiters
 #+begin_src emacs-lisp
   (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
   (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
   (add-hook 'ielm-mode-hook #'rainbow-delimiters-mode)
   (add-hook 'lisp-interaction-mode-hook #'rainbow-delimiters-mode)
   (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)

   (custom-set-faces
          '(rainbow-delimiters-depth-1-face ((t (:foreground "black"))))
          '(rainbow-delimiters-depth-2-face ((t (:foreground "red"))))
          '(rainbow-delimiters-depth-3-face ((t (:foreground "cyan3"))))
          '(rainbow-delimiters-depth-4-face ((t (:foreground "blue"))))
          '(rainbow-delimiters-depth-5-face ((t (:foreground "gold"))))
          '(rainbow-delimiters-depth-6-face ((t (:foreground "lavender"))))
          '(rainbow-delimiters-depth-7-face ((t (:foreground "black"))))
          '(rainbow-delimiters-depth-8-face ((t (:foreground "magenta"))))
          '(rainbow-delimiters-depth-9-face ((t (:foreground "red")))))
 #+end_src
*** Multiple Cursors
#+begin_src emacs-lisp
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src
** Abbrev Setup
#+begin_src emacs-lisp
  (setq my-abbreviations "ABBREVPATH")
  (setenv my-abbreviations "~/my-sys-setup/my-abbrevs.el")
  (load (getenv my-abbreviations))
#+end_src
** set up PATH to work with cider-jack-in-cljs
   #+begin_src emacs-lisp

   #+end_src
* Elisp lessons
#+begin_src emacs-lisp
  ;; Writing Functions in Elisp
  ;; 3.12 Exercises
  ;; ==============
  ;;   • Write a non-interactive function that doubles the value of its
  ;;     argument, a number.  Make that function interactive.
  (defun double-value (number)
    "Non-interactive version"
    (* 2 number))

  (double-value 4)

  (defun double-value-interactive (number)
    "Interactive version of doubling a value"
    (interactive "p")
    (message (number-to-string (* number 2))))

  ;;   • Write a function that tests whether the current value of
  ;;     ‘fill-column’ is greater than the argument passed to the function,
  ;;     and if so, prints an appropriate message.
  (defun is-num-greater-than-curr-fill-column (number)
    "Returns a message indicating whether the current value of `fill-column' is greater than NUMBER."
    (if (> fill-column number)
        (message "fill-column is greater than %d." number)
      (message "%d is greater than fill-column" number)))
  ;; ==============
  ;; 4.6 Exercises
  ;; =============
  ;;   • Write your own ‘simplified-end-of-buffer’ function definition; then
  ;;     test it to see whether it works.
  (defun simplified-end-of-buffer ()
    "Go to end of buffer."
    (interactive)
    (push-mark)
    (goto-char (point-max)))

  ;;   • Use ‘if’ and ‘get-buffer’ to write a function that prints a message
  ;;     telling you whether a buffer exists.

  (defun does-buffer-exist? (buffer)
    "Echoes whether or not BUFFER or BUFFER-NAME exists."
    (if (get-buffer buffer)
        (message "It exists.")
      (message "It does not exist.")))


  ;; done interactively
  ;; (defun my/check-buffer-exists (name)
  ;;   "Send a message to echo area if buffer NAME exists."
  ;;   (interactive "sBuffer name: ")
  ;;   (if (get-buffer name)
  ;;       (message "The buffer %s exists" name)
  ;;     (message "Sorry, the buffer, %s, does not exist." name)))

  ;; Write an interactive function with an optional argument that tests
  ;; whether its argument, a number, is greater than or equal to, or else,
  ;; less than the value of ‘fill-column’, and tells you which, in a message.
  ;; However, if you do not pass an argument to the function, use 56 as a
  ;; default value.

  (defun is-argument-greater-than-or-else (&optional number)
    (if (<= fill-column (or number (setq number 56)))
        (message "argument %d is greater than or equal to fill-column" number)
      (message "argument %d is less than fill-column" number)))

  ;; 6.3 Exercise with Narrowing
  ;; ===========================

  ;; Write a function that will display the first 60 characters of the
  ;; current buffer, even if you have narrowed the buffer to its latter half
  ;; so that the first line is inaccessible.  Restore point, mark, and
  ;; narrowing.

  (defun buffer-first-60-characters ()
    "Prints the first 60 characters of the current buffer."
    (interactive)
    (save-restriction
      (widen)
      (save-excursion
        (message (buffer-substring-no-properties 1 61)))))
  (setq birds '(raven crow pigeon ostrich))

  ;; 7.7 Exercise
  ;; ============

  ;; Construct a list of four birds by evaluating several expressions with
  ;; ‘cons’.  Find out what happens when you ‘cons’ a list onto itself.
  ;; Replace the first element of the list of four birds with a fish.
  ;; Replace the rest of that list with a list of other fish.
  (cons birds birds)

  (setcar birds 'nemo)

  birds

  (setcdr birds '(pufferfish goldfish starfish))

  birds

  ;; TIP shorten a list by setting the last element of the
  ;; list to nil

  (cons 'bear '(octopus))

  ; 8.7 Searching Exercises
  ; =======================
  ;; Write an interactive function that searches for a string.  If the
  ;; search finds the string, leave point after it and display a message
  ;; that says “Found!”.

  (defun test-search (string)
    "Leave point if string found."
    (interactive "sSearch for: ")
    (if (search-forward string nil t nil)
        (progn
          (point)
          (message "Found!"))
      (message "Not found!")))

  ;;   • Write a function that prints the third element of the kill ring in
  ;;     the echo area, if any; if the kill ring does not contain a third
  ;;     element, print an appropriate message.
  (defun print-kill-ring-3rd-item ()
    (message (or (car (nthcdr 2 kill-ring)) "No third item in kill-ring.")))


  ;; 9.2 Exercise
  ;; ============
  ;;
  ;; Set ‘flowers’ to ‘violet’ and ‘buttercup’.  Cons two more flowers on to
  ;; this list and set this new list to ‘more-flowers’.  Set the CAR of
  ;; ‘flowers’ to a fish.  What does the ‘more-flowers’ list now contain?

  (setq flowers '(violet buttercup))

  (setq more-flowers (cons 'sunflower flowers))


  (setcar flowers 'fish)

  flowers ;; => (fish buttercup)

  more-flowers ;; => (sunflower fish buttercup)
  ;; 10.3 Exercise
  ;; =============
  ;;   • Using ‘nthcdr’ and ‘car’, construct a series of expressions to
  ;;     return the first, second, third, and fourth elements of a list.

  (setq my-list '(1 2 3 4 5 6 7 8 9 0))

  (car my-list)
  1

  (car (nthcdr 1 my-list))
  2

  (car (nthcdr 2 my-list))
  3

  (car (nthcdr 3 my-list))
  4

  ;;11.4 Looping Exercise
  ;;=====================
  ;;
  ;;   • Write a function similar to ‘triangle’ in which each row has a
  ;;     value which is the square of the row number.  Use a ‘while’ loop.

  (defun triangle-squared (number-of-rows)
    (let ((total 0)
          (row-num 1))
      (while (<= row-num number-of-rows)
        (setq total (+ total (* row-num row-num)))
        (setq row-num (1+ row-num)))
      total))

  (triangle-squared 1)
  1
  (triangle-squared 2)
  5
  (triangle-squared 3)
  14

  ;; • Write a function similar to ‘triangle’ that multiplies instead of
  ;;   adds the values.

  (defun triangle-multiply (num-of-rows)
    "Multiply the number of rows of pebbles in a triangle."
    (let ((total 1))
      (dotimes (number num-of-rows total)
         (setq total (* total (1+ number)))))) ; 1+ needed because dotimes is 0 indexed

  ;; • Rewrite these two functions recursively.  Rewrite these functions
  ;;   using ‘cond’.

  (defun triangle-square-recursive (num-of-rows)
    (if (= num-of-rows 1)
        1
      (+ (* num-of-rows num-of-rows) (triangle-square-recursive (1- num-of-rows)))))

  (defun triangle-multiply-recursive (number)
    "Multiply the number of rows of pebbles in a triangle recursively."
    (if (= number 1)
        1
      (* number (triangle-multiply-recursive (1- number)))))

  (defun triangle-squared-recursive-cond (number)
    (cond
     ((<= number 1) 1)
     ((> number 1) (+ (* number number) (triangle-squared-recursive-cond (1- number))))))

  (defun triangle-multiply-recursive-cond (number)
    "Multiply the number of rows of pebbles in a triangle recursively using cond."
    (cond ((<= number 1) 1)
          ((> number 1) (* number (triangle-multiply-recursive-cond (1- number))))))
#+end_src
* Notes
** Debian Buster/Ubuntu
*** Setting up Python
   first [[https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-programming-environment-on-debian-10][setup debian]]

   basically you'll need:
   1. python3-pip
   2. build-essential libssl-dev libffi-dev python3-dev

   then you can:
   ~pip3 install --user virtualenvwrapper jedi rope black yapf autopep8 flake8~

**** Install required dev packages for Emacs elpy
     Run ~pip3 install --user virtualenvwrapper jedi rope
     black yapf autopep8 flake8~

**** Virtualenvwrapper vars
     NOTE: When updating Ubuntu (which does not happen often)
     a new Python version will be installed, therefore, it's good to run
     ~python3 -m pip install virtualenvwrapper --upgrade~ or w/o the ~--upgrade~
     switch to reinstall the package

     NOTE 2: Maybe this setup won't be needed in the future as I will be moving
     most of my workflow within Guix with it's profile and environment tools

   #+begin_src shell
   export WORKON_HOME=$HOME/.virtualenvs
   export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
   export PROJECT_HOME=$HOME/Documents/Devel
   export VIRTUALENVWRAPPER_SCRIPT=$HOME/.local/bin/virtualenvwrapper.sh
   source $HOME/.local/bin/virtualenvwrapper_lazy.sh
   #+end_src

** Setting up Guix on Ubuntu
*** could not install guile locale warning
    place in ~.profile~
#+begin_src shell
export GUIX_LOCPATH="$HOME/.guix-profile/lib/locale"
#+end_src

*** including GUI icons in Gnome
    add in ~.profile~
#+begin_src shell
export XDG_DATA_DIRS="${GUIX_PROFILE}/share${XDG_DATA_DIRS:+:}$XDG_DATA_DIRS"
#+end_src

*** locales not being found issue
    in ~/etc/systemd/system/guix-daemon.service~, there should be a line
    that starts with ~Envionment=...~, this should read ~Envionment[filtered]=...~
* Exec-path setup
  To use Node with NVM use this
  #+begin_src emacs-lisp
    (exec-path-from-shell-copy-env "PATH")
    (exec-path-from-shell-initialize)
  #+end_src
